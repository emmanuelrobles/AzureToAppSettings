@page "/transform"
@using Azure_to_AppSettings
@using Microsoft.FSharp.Collections
@using Microsoft.FSharp.Core
@using Newtonsoft.Json
@using WebUI.Models
@inject SettingsState SettingsState
@inject NodeSettingsState NodeSettingsState

<h1>Transform from azure settings to @SettingsState.Output</h1>

<div class="json-container">
    <div style="padding: 10px 0 10px 0; display: flex; flex-direction: row">
        <div style="padding-right: 25px">
            <div class="form-group">
                <label for="outputFormat">Output format</label>
                <select id="outputFormat" class="form-control" style="width: auto" @bind="SettingsState.Output">

                    @foreach (var data in Enum.GetValues(typeof(TransformToEnum)))
                    {
                        <option value="@data"> @data.ToString() </option>
                    }

                </select>
            </div>
        </div>

        <div>
            <div class="form-group">
                <label for="separatorFlag">Separator flag</label>
                <input type="text" class="form-control" id="separatorFlag" placeholder="Enter flag" @bind="NodeSettingsState.SeparatorFlag">
            </div>
        </div>
    </div>
    <div>
        <span>Azure settings</span>
        <textarea class="form-control" rows="5" @bind="SettingsState.Json" @bind:event="oninput"></textarea>
    </div>

    @if (SettingsState.Error is {HasError: true })
    {
        <span class="text-danger">
            @SettingsState.Error.ErrorMsg
        </span>
    }

    <div>
        <button type="button" class="btn btn-primary" @onclick="OnConvertClicked">Transform</button>
    </div>

    <div>
        <span>@SettingsState.Output</span>
        <textarea class="form-control" rows="5" @bind="SettingsState.AppSettingsJson"></textarea>
    </div>
</div>


@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SettingsState.OnChange += StateHasChanged;
    }

    private void OnConvertClicked()
    {
        FSharpMap<string, string> DeserializesFromAppSettings(string data) => JsonConvert.DeserializeObject<FSharpMap<string, string>>(data);

        FSharpMap<string, string> DeserializesFromConfiguration(string data)
        {
            var config = JsonConvert.DeserializeObject<IEnumerable<ConfigDto>>(data);
            return new FSharpMap<string, string>(config.Select(e => new Tuple<string, string>(e.Name, e.Value)));
        }

        try
        {
            SettingsState.Error = null;
            var map = SettingsState.Json.StartsWith("[")
                ? DeserializesFromConfiguration(SettingsState.Json)
                : DeserializesFromAppSettings(SettingsState.Json);
            SettingsState.AppSettingsJson = GetOutputFunc(SettingsState.Output)
                .Invoke(
                    AzureToNode
                        .processData
                        (NodeSettingsState.SeparatorFlag, MapModule.ToList(map))
                    );
            Console.WriteLine(NodeSettingsState.SeparatorFlag);
            Console.WriteLine(SettingsState.AppSettingsJson);
        }
        catch (Exception e)
        {
            SettingsState.Error = new Error()
            {
                ErrorMsg = e.Message,
                HasError = true
            };
        }
    }

    private FSharpFunc<Node, string> GetOutputFunc(TransformToEnum outputs)
    {
        return outputs switch{
            TransformToEnum.AppSettingsJson => AzureToNode.toJson,
            TransformToEnum.VueSettings => AzureToNode.toVueSettings,
            _ => throw new ArgumentOutOfRangeException(nameof(outputs), outputs, "Output not supported")};
    }

}