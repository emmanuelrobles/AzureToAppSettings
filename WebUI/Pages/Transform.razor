@page "/transform"
@using Azure_to_AppSettings
@using Microsoft.FSharp.Collections
@using Newtonsoft.Json
@using WebUI.Models
@inject SettingsState _state

<h1>Transform from azure settings to appSettings</h1>

<div class="json-container">
    <div style="padding: 10px 0 10px 0">
        <span>Output format</span>
        <select class="form-control" style="width: auto" @bind="_state.Output">

            @foreach (var data in Enum.GetValues(typeof(TransformToEnum)))
            {
                <option value="@data"> @data.ToString() </option>
            }

        </select>
    </div>
    <div>
        <span>Azure settings</span>
        <textarea class="form-control" rows="5" @bind="_state.Json" @bind:event="oninput"></textarea>
    </div>

    @if (_state.Error is {HasError: true })
    {
        <span class="text-danger">
            @_state.Error.ErrorMsg
        </span>
    }

    <div>
        <button type="button" class="btn btn-primary" @onclick="OnConvertClicked">Transform</button>
    </div>

    <div>
        <span>AppSettings.json</span>
        <textarea class="form-control" rows="5">@_state.AppSettingsJson</textarea>
    </div>
</div>


@code {
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _state.OnChange += StateHasChanged;
    }

    private void OnConvertClicked()
    {
        FSharpMap<string, string> DeserializesFromAppSettings(string data) => JsonConvert.DeserializeObject<FSharpMap<string, string>>(data);
        FSharpMap<string, string> DeserializesFromConfiguration(string data)
        {
            var config = JsonConvert.DeserializeObject<IEnumerable<ConfigDto>>(data);
            return new FSharpMap<string, string>(config.Select(e => new Tuple<string,string>(e.Name,e.Value)));
        }
        
        try
        {
            _state.Error = null;
            var map = _state.Json.StartsWith("[") 
                ? DeserializesFromConfiguration(_state.Json)
                : DeserializesFromAppSettings(_state.Json);
            _state.AppSettingsJson = GetOutputFunc(_state.Output)(AzureToNode.processData(MapModule.ToList(map)));
        }
        catch (Exception e)
        {
            _state.Error = new Error()
            {
                ErrorMsg = e.Message,
                HasError = true
            };
        }
        
    }

    private Func<Node, string> GetOutputFunc(TransformToEnum outputs)
    {
        return outputs switch{
            TransformToEnum.AppSettingsJson => AzureToNode.toJson,
            TransformToEnum.VueSettings => AzureToNode.toVueSettings,
            _ => throw new ArgumentOutOfRangeException(nameof(outputs), outputs, "Output not supported")};
    }
}